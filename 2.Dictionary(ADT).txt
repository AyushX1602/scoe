#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

class Word
{
    private:
        string word;
        string meaning;
        int chain;

    public:
        Word()
        {
            word = "NULL";
            meaning = "NULL";
            chain = -1;
        }

        void input()
        {
            cout<<"\nEnter word and meaning below:\nWord: ";
            cin>>word;
            cout<<"Meaning: ";
            cin>>meaning;
        }
        void display ()
        {
            cout<<setw(10)<<word<<setw(40)<<meaning<<setw(7)<<chain<<endl;
        }

        friend class Dictionary;
};

class Dictionary
{
    private:
        Word hashTable[10];
    public:
        Dictionary()
        {
            Word w;
            for(int i = 0; i < 10; i++)
            {
                hashTable[i] = w;
            }
        }

        int hashFunction(string key)
        {
            int sum = 0;
            for(int i = 0; i < key.length(); i++)
            {
                sum += key[i];
            }
            return (sum %10);
        }

        bool insert(Word w)
        {
            int homeindex = hashFunction(w.word);
            Word temp;
            if(hashTable[homeindex].word == "NULL")
            {
                hashTable[homeindex] = w;
                return true;
            }
            else if(hashFunction(hashTable[homeindex].word) != homeindex)
//replacement
            {
                temp = hashTable[homeindex];
                hashTable[homeindex] = w;
                while(hashTable[homeindex].chain != -1)
                {
                    homeindex = hashTable[homeindex].chain;
                }
                int probe = 1;
                int newindex = (homeindex + probe) % 10;
                while (newindex != homeindex)
                {
                    if(hashTable[newindex].word == "NULL")
                    {
                        hashTable[newindex] = temp;
                        hashTable[homeindex].chain = newindex;
                        return true;
                    }
                    else
                    {
                        probe++;
                        newindex = (homeindex + probe) % 10;
                    }
                }
                cout<<"Dictionary full.";
                return false;
            }
            else //collision
            {
                while(hashTable[homeindex].chain != -1)
                {
                    homeindex = hashTable[homeindex].chain;
                }
                int probe = 1;
                int newindex = (homeindex + probe) % 10;
                while (newindex != homeindex)
                {
                    if(hashTable[newindex].word == "NULL")


                    {
                        hashTable[newindex] = w;
                        hashTable[homeindex].chain = newindex;
                        return true;
                    }
                    else
                    {
                        probe++;
                        newindex = (homeindex + probe) % 10;
                    }
                }
                cout<<"Dictionary full.";
                return false;
            }
        }

        bool find(string word)
        {
            int homeindex = hashFunction(word);
            if(hashTable[homeindex].word == word)
            {
                cout<<"Search successful!";
                cout<<"\n"<<hashTable[homeindex].word<<":"<<hashTable[homeindex].meaning;
                cout<<"\nNo. of comparisons required to search: 1";
                return true;
            }
            else
            {
                int  newindex = hashTable[homeindex].chain;
                int counter = 2;

                while(newindex != -1)
                {
                    if(hashTable[newindex].word == word)
                    {
                        cout<<"Search successful!";
                        cout<<"\n"<<hashTable[newindex].word<<":"<<hashTable[newindex].meaning;
                        cout<<"\nNo. of comparisons required to search:"<<counter;
                        return true;
                    }
                    else
                    {
                        newindex = hashTable[newindex].chain;
                        counter++;
                    }
                }
                return false;
            }
        }

        bool dlt(string word)
        {
            Word w;
            int homeindex = hashFunction(word);
            if(hashTable[homeindex].word == word)
            {
                hashTable[homeindex] = w;
                cout<<"Deletion successful!";
                return true;
            }
            else
            {
                int  newindex = hashTable[homeindex].chain;
                while(newindex != -1)
                {
                    if(hashTable[newindex].word == word)
                    {
                        hashTable[newindex] = w;
                        cout<<"Deletion successful!";
                        return true;
                    }
                    else
                    {
                        newindex = hashTable[newindex].chain;
                    }
                }
                return false;
            }
        }

        void show()
        {

cout<<setw(7)<<"Index"<<setw(10)<<"Word"<<setw(40)<<"Meaning"<<setw(7)<<"Chain"<<endl;
            for(int i = 0; i < 10; i++)
            {
                cout<<setw(7)<<i;
                hashTable[i].display();
            }
        }
};

int main()
{
    Word w;
    Dictionary d;
    int choice;
    string wrd;

    do
    {
        cout<<"\nEnter you choice:\n1. Insert\n2. Find\n3. Delete\n4.Display\n5. Exit..."<<endl;
        cin>>choice;

        switch(choice)
        {
            case 1: w.input();
                    if(d.insert(w) == true)
                        cout<<"\nData inserted successfully.\n";
                    else
                        cout<<"\nData insertion unsuccessful.\n";
                    break;

            case 2: cout<<"\nEnter word to search: ";
                    cin>>wrd;
                    if(d.find(wrd) == true)
                        cout<<"";
                    else
                        cout<<"\nSearch unsuccessful.";
                    break;

            case 3: cout<<"\nEnter word to delete: ";
                    cin>>wrd;
                    if(d.dlt(wrd) == true)
                        cout<<"";
                    else
                        cout<<"\nDeletion unsuccessful.";
                    break;

            case 4: cout<<"Displaying Dictionary:\n";
                    d.show();
                    break;

            case 5: cout<<"\nExiting...";
                    break;

            default: cout<<"\nInvalid Input.";
        }
    }while(choice < 5);
    return 0;
}
