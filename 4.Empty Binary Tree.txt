#include<iostream>
#include<queue>
using namespace std;

class node {
private:
    node* right;
    node* left;
    int value;

public:
    node(int v = 0) {
        right = NULL;
        left = NULL;
        value = v;
    }

    friend class BST;
};

class BST {
private:
    node* root;

public:
    BST() {
        root = NULL;
    }

    // Insertion in BST
    bool insert(int value) {
        if (root == NULL) {
            root = new node(value);
            cout << "New node is inserted at the root" << endl;
            return true;
        }

        node* temp = root;
        while (temp != NULL) {
            if (value < temp->value) {
                if (temp->left == NULL) {
                    temp->left = new node(value);
                    cout << "Value inserted!" << endl;
                    return true;
                } else {
                    temp = temp->left;
                }
            } else if (value > temp->value) {
                if (temp->right == NULL) {
                    temp->right = new node(value);
                    cout << "Value inserted!" << endl;
                    return true;
                } else {
                    temp = temp->right;
                }
            } else {
                cout << "Duplicate values are not inserted" << endl;
                return false;
            }
        }
        return false; // For completeness
    }

    // Find number of nodes in the longest path
    int countLongestPathNodes(node* temp) {
        if (temp == NULL)
            return 0;

        int leftPath = countLongestPathNodes(temp->left);
        int rightPath = countLongestPathNodes(temp->right);

        return max(leftPath, rightPath) + 1;
    }
     int height() {
        int longestPathNodes = countLongestPathNodes(root);
        cout << "Number of nodes in the longest path (root to leaf): " << longestPathNodes << endl;
        return longestPathNodes;
    }



    //Find minimum value
    int findMin()
    {
        node*temp;
        if(root!=NULL)
        {
            temp=root;
            while(temp->left!=NULL)
            {
                temp=temp->left;
            }
            return temp->value;
        }
        else
        {
            return -1;
        }
    }
    
    //Change the tree so that the roles of the left and right pointers are swapped at every node(Mirror Image)
    void mirrorTree(node* &temp) {
        if (temp == NULL) return;

        mirrorTree(temp->left);
        mirrorTree(temp->right);

        // Swap
        node* t = temp->left;
        temp->left = temp->right;
        temp->right = t;
    }
    void mirror() {
        mirrorTree(root);
        cout << "Tree has been converted to its mirror image." << endl;
    }
    
    //Search a value
    bool search(int value)
    {
        node* temp = root;
        
        while (temp != NULL) 
        {
            if (value == temp->value) 
            {
                cout << value << " is found in the tree." << endl;
                return true;
            } 
            else if (value < temp->value) 
            {
                temp = temp->left;
            } 
            else 
            {
                temp = temp->right;
            }
        }
        
        cout << value << " is NOT found in the tree." << endl;
        return false;
    }
    
    //Display(inorder traversal)
    void inorder(node* temp) 
    {
        if (temp == NULL) return;
        inorder(temp->left);
        cout << temp->value << " ";
        inorder(temp->right);
    }
    void display()
    {
        cout << "Tree (inorder traversal): ";
        inorder(root);
        cout << endl;
    }


};

int main() {
    BST B;
    int val;
    int choice = 0;

    cout << "---BST MENU---" << endl;
    cout << "1. Insert new node\n";
    cout << "2. Find number of nodes in the longest path (Height)\n";
    cout << "3. Minimum data value found in the tree\n";
    cout << "4. Mirror the tree \n";
    cout << "5. Search a value\n";
    cout<<"6. Display\n";
    cout << "7. Exit\n";

    while (choice != 7) {
        cout << "\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter the element to be inserted: ";
            cin >> val;
            B.insert(val);
            break;

        case 2:
            B.height();
            break;
            
        case 3:
             cout<<"Minimum value in the BST is:"<<B.findMin()<<endl;
             break;
             
        case 4:
            B.mirror();
            break;
        
        case 5:
            cout<<"Enter the value to search:";
            cin>>val;
            B.search(val);
            break;
            
        case 6:
             B.display();
             break;


        case 7:
            cout << "End of the program!" << endl;
            return 0;
            

        default:
            cout << "Please enter a valid choice!" << endl;
        }
    }

    return 0;
}
