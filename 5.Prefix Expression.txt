#include <iostream>
#include <stack>
using namespace std;

class Node {
private:
    char data;
    Node *left;
    Node *right;
public:
    Node(char data = '0') {
        this->data = data;
        left = NULL;
        right = NULL;
    }
    friend class ExpressionTree;
};

class ExpressionTree {
private:
    Node *root;

public:
    ExpressionTree() {
        root = NULL;
    }

    bool buildExpressionTree(string exp);
    void postorder_traversal_2(); // Non-recursive post-order
    void deleteTree();            // Deletes the tree recursively

private:
    void deleteTree(Node* node);
};

bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

bool ExpressionTree::buildExpressionTree(string exp) {
    stack<Node *> s;
    for (int i = exp.length() - 1; i >= 0; --i) {
        Node* newNode = new Node(exp[i]);
        if (isOperator(exp[i])) {
            if (s.empty()) return false;
            newNode->left = s.top(); s.pop();

            if (s.empty()) return false;
            newNode->right = s.top(); s.pop();
        }
        s.push(newNode);
    }

    if (s.size() != 1) return false;
    root = s.top(); s.pop();
    return true;
}

void ExpressionTree::postorder_traversal_2() {
    stack<Node*> s1, s2;
    if (root == NULL) return;

    s1.push(root);
    while (!s1.empty()) {
        Node* temp = s1.top(); s1.pop();
        s2.push(temp);

        if (temp->left) s1.push(temp->left);
        if (temp->right) s1.push(temp->right);
    }

    cout << "Post-Order Traversal (Non-Recursive): ";
    while (!s2.empty()) {
        cout << s2.top()->data << " ";
        s2.pop();
    }
    cout << endl;
}

void ExpressionTree::deleteTree(Node* node) {
    if (node == NULL) return;
    deleteTree(node->left);
    deleteTree(node->right);
    delete node;
}

void ExpressionTree::deleteTree() {
    deleteTree(root);
    root = NULL;
    cout << "Tree deleted successfully." << endl;
}

int main() {
    ExpressionTree et;
    string expression = "+--a*bc/def"; // Example prefix expression

    if (et.buildExpressionTree(expression)) {
        et.postorder_traversal_2();  // Non-recursive post-order traversal
        et.deleteTree();             // Delete the expression tree
    } else {
        cout << "Invalid expression" << endl;
    }

    return 0;
}
